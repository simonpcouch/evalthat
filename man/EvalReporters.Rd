% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reporter-progress.R
\name{EvalReporters}
\alias{EvalReporters}
\alias{EvalProgressReporter}
\alias{EvalCompactProgressReporter}
\title{Test reporters for LLM evaluation}
\description{
evalthat provides a number of custom testthat \link[testthat:Reporter]{testthat::Reporter}s.
These reporters process the results from test files, generating interactive
summaries and saving results to persistent files.

\code{EvalProgressReporter} is designed for interactive use. Its goal is to
give you actionable insights to help you understand the status of your
code. This reporter also praises you from time-to-time if all your tests
pass. It's the default reporter for \code{\link[=test_dir]{test_dir()}}.

\code{EvalCompactProgressReporter} is a minimal version of \code{EvalProgressReporter}
designed for use with single files. It's the default reporter for
\code{\link[=test_file]{test_file()}}.
}
\concept{reporters}
\section{Super classes}{
\code{\link[testthat:Reporter]{testthat::Reporter}} -> \code{\link[testthat:ProgressReporter]{testthat::ProgressReporter}} -> \code{EvalProgressReporter}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{show_praise}}{Whether to show praise. Will not be shown, even if \code{TRUE}.}

\item{\code{res_ok, res_skip, res_warn, res_fail}}{The same as fields prefixed with
\verb{n_*} in the superclass, but encoded a vector whose sum can be taken to
find the \verb{n_*} values. Enables weights per-expectation.}

\item{\code{ctxt_res_ok, ctxt_res_skip, ctxt_res_warn, ctxt_res_fail, ctxt_issues, ctxt_n}}{The
same as those without the \verb{ctxt_*} prefix, but per-context.}

\item{\code{io}}{The inputs and outputs flagged with \code{\link[=input]{input()}} and \code{\link[=output]{output()}}.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{res_ok, res_skip, res_warn, res_fail}}{The same as fields prefixed with
\verb{n_*} in the superclass, but encoded a vector whose sum can be taken to
find the \verb{n_*} values. Enables weights per-expectation.}

\item{\code{ctxt_res_ok, ctxt_res_skip, ctxt_res_warn, ctxt_res_fail, ctxt_issues, ctxt_n}}{The
same as those without the \verb{ctxt_*} prefix, but per-context.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-EvalProgressReporter-is_full}{\code{EvalProgressReporter$is_full()}}
\item \href{#method-EvalProgressReporter-update_io}{\code{EvalProgressReporter$update_io()}}
\item \href{#method-EvalProgressReporter-start_file}{\code{EvalProgressReporter$start_file()}}
\item \href{#method-EvalProgressReporter-update_counts}{\code{EvalProgressReporter$update_counts()}}
\item \href{#method-EvalProgressReporter-reset_counts}{\code{EvalProgressReporter$reset_counts()}}
\item \href{#method-EvalProgressReporter-start_context}{\code{EvalProgressReporter$start_context()}}
\item \href{#method-EvalProgressReporter-show_header}{\code{EvalProgressReporter$show_header()}}
\item \href{#method-EvalProgressReporter-show_status}{\code{EvalProgressReporter$show_status()}}
\item \href{#method-EvalProgressReporter-end_context}{\code{EvalProgressReporter$end_context()}}
\item \href{#method-EvalProgressReporter-save_results}{\code{EvalProgressReporter$save_results()}}
\item \href{#method-EvalProgressReporter-result_summary}{\code{EvalProgressReporter$result_summary()}}
\item \href{#method-EvalProgressReporter-add_result}{\code{EvalProgressReporter$add_result()}}
\item \href{#method-EvalProgressReporter-cache_for_grading}{\code{EvalProgressReporter$cache_for_grading()}}
\item \href{#method-EvalProgressReporter-start_reporter}{\code{EvalProgressReporter$start_reporter()}}
\item \href{#method-EvalProgressReporter-end_reporter}{\code{EvalProgressReporter$end_reporter()}}
\item \href{#method-EvalProgressReporter-end_file}{\code{EvalProgressReporter$end_file()}}
\item \href{#method-EvalProgressReporter-clone}{\code{EvalProgressReporter$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id=".start_context"><a href='../../testthat/html/Reporter.html#method-Reporter-.start_context'><code>testthat::Reporter$.start_context()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="cat_line"><a href='../../testthat/html/Reporter.html#method-Reporter-cat_line'><code>testthat::Reporter$cat_line()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="cat_tight"><a href='../../testthat/html/Reporter.html#method-Reporter-cat_tight'><code>testthat::Reporter$cat_tight()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="end_context_if_started"><a href='../../testthat/html/Reporter.html#method-Reporter-end_context_if_started'><code>testthat::Reporter$end_context_if_started()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="end_test"><a href='../../testthat/html/Reporter.html#method-Reporter-end_test'><code>testthat::Reporter$end_test()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="local_user_output"><a href='../../testthat/html/Reporter.html#method-Reporter-local_user_output'><code>testthat::Reporter$local_user_output()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="rule"><a href='../../testthat/html/Reporter.html#method-Reporter-rule'><code>testthat::Reporter$rule()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="start_test"><a href='../../testthat/html/Reporter.html#method-Reporter-start_test'><code>testthat::Reporter$start_test()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="update"><a href='../../testthat/html/Reporter.html#method-Reporter-update'><code>testthat::Reporter$update()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="ProgressReporter" data-id="cr"><a href='../../testthat/html/ProgressReporter.html#method-ProgressReporter-cr'><code>testthat::ProgressReporter$cr()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="ProgressReporter" data-id="initialize"><a href='../../testthat/html/ProgressReporter.html#method-ProgressReporter-initialize'><code>testthat::ProgressReporter$initialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="ProgressReporter" data-id="report_issues"><a href='../../testthat/html/ProgressReporter.html#method-ProgressReporter-report_issues'><code>testthat::ProgressReporter$report_issues()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="ProgressReporter" data-id="should_update"><a href='../../testthat/html/ProgressReporter.html#method-ProgressReporter-should_update'><code>testthat::ProgressReporter$should_update()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="ProgressReporter" data-id="status_data"><a href='../../testthat/html/ProgressReporter.html#method-ProgressReporter-status_data'><code>testthat::ProgressReporter$status_data()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-is_full"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-is_full}{}}}
\subsection{Method \code{is_full()}}{
Method overwritting to always return \code{FALSE}, as failed evals are not
a reason to stop testing in our context.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$is_full()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-update_io"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-update_io}{}}}
\subsection{Method \code{update_io()}}{
Concatenated inputs and outputs flagged with \code{input()} and \code{output()}.


Concatenate inputs and outputs flagged with \code{input()} and \code{output()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$update_io(x, test, type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{The input or output.}

\item{\code{test}}{The name of the test chunk.}

\item{\code{type}}{One of "input" or "output".}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-start_file"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-start_file}{}}}
\subsection{Method \code{start_file()}}{
Setup for starting a new test file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$start_file(file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{File name.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-update_counts"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-update_counts}{}}}
\subsection{Method \code{update_counts()}}{
Eval reporters' \verb{n_*} fields are actually tracked by
maintaining vectors of 1s prefixed with \verb{res_*}. This is to accommodate
a future extension where weights can be assigned to each pass/fail.

This function updates the \verb{n_*} values based on the \verb{res_*} values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$update_counts()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-reset_counts"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-reset_counts}{}}}
\subsection{Method \code{reset_counts()}}{
Sets the values of \verb{res_*} fields to \code{numeric()} and calls
\code{update_counts()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$reset_counts()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-start_context"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-start_context}{}}}
\subsection{Method \code{start_context()}}{
Resets counters and initiates a progress bar.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$start_context(context)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{context}}{Arguments supplied to the evaluation function, as a
named list.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-show_header"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-show_header}{}}}
\subsection{Method \code{show_header()}}{
Show the header tabulating successes and failures.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$show_header()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-show_status"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-show_status}{}}}
\subsection{Method \code{show_status()}}{
Tabulate successes and failures in the current context.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$show_status(complete = FALSE, time = 0, pad = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{complete}}{Logical.}

\item{\code{time}}{Ignored. TODO: remove this?}

\item{\code{pad}}{Logical.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-end_context"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-end_context}{}}}
\subsection{Method \code{end_context()}}{
Teardown following the test run.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$end_context()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-save_results"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-save_results}{}}}
\subsection{Method \code{save_results()}}{
Situates the evaluation results in a tibble and saves it to the
file \code{eval_file_name/timestamp.rds} using \code{\link[qs:qread]{qs::qread()}}. Read individual
results with \code{\link[qs:qsave]{qs::qsave()}}.
Situate evaluation results in a tibble.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$save_results()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-result_summary"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-result_summary}{}}}
\subsection{Method \code{result_summary()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$result_summary(timestamp)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{timestamp}}{DTTM as \code{format(Sys.time(), "\%Y\%m\%d_\%H\%M\%S")}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-add_result"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-add_result}{}}}
\subsection{Method \code{add_result()}}{
Append a given \verb{expect_*()} or \verb{grade_*()} result to the current context.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$add_result(context, test, result)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{context}}{Context from \code{\link[=evaluating]{evaluating()}}.}

\item{\code{test}}{The name of the test block.}

\item{\code{result}}{Result.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-cache_for_grading"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-cache_for_grading}{}}}
\subsection{Method \code{cache_for_grading()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$cache_for_grading(target)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-start_reporter"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-start_reporter}{}}}
\subsection{Method \code{start_reporter()}}{
Start the current reporter.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$start_reporter()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-end_reporter"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-end_reporter}{}}}
\subsection{Method \code{end_reporter()}}{
Tear down the current reporter.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$end_reporter()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-end_file"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-end_file}{}}}
\subsection{Method \code{end_file()}}{
Overrides the superclass' method to end the context when the file ends
since files are reran when running evals.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$end_file()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalProgressReporter-clone"></a>}}
\if{latex}{\out{\hypertarget{method-EvalProgressReporter-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalProgressReporter$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[testthat:Reporter]{testthat::Reporter}} -> \code{\link[testthat:ProgressReporter]{testthat::ProgressReporter}} -> \code{\link[evalthat:EvalProgressReporter]{evalthat::EvalProgressReporter}} -> \code{EvalCompactProgressReporter}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-EvalCompactProgressReporter-new}{\code{EvalCompactProgressReporter$new()}}
\item \href{#method-EvalCompactProgressReporter-start_file}{\code{EvalCompactProgressReporter$start_file()}}
\item \href{#method-EvalCompactProgressReporter-start_reporter}{\code{EvalCompactProgressReporter$start_reporter()}}
\item \href{#method-EvalCompactProgressReporter-end_reporter}{\code{EvalCompactProgressReporter$end_reporter()}}
\item \href{#method-EvalCompactProgressReporter-show_status}{\code{EvalCompactProgressReporter$show_status()}}
\item \href{#method-EvalCompactProgressReporter-clone}{\code{EvalCompactProgressReporter$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id=".start_context"><a href='../../testthat/html/Reporter.html#method-Reporter-.start_context'><code>testthat::Reporter$.start_context()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="cat_line"><a href='../../testthat/html/Reporter.html#method-Reporter-cat_line'><code>testthat::Reporter$cat_line()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="cat_tight"><a href='../../testthat/html/Reporter.html#method-Reporter-cat_tight'><code>testthat::Reporter$cat_tight()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="end_context_if_started"><a href='../../testthat/html/Reporter.html#method-Reporter-end_context_if_started'><code>testthat::Reporter$end_context_if_started()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="end_test"><a href='../../testthat/html/Reporter.html#method-Reporter-end_test'><code>testthat::Reporter$end_test()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="local_user_output"><a href='../../testthat/html/Reporter.html#method-Reporter-local_user_output'><code>testthat::Reporter$local_user_output()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="rule"><a href='../../testthat/html/Reporter.html#method-Reporter-rule'><code>testthat::Reporter$rule()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="start_test"><a href='../../testthat/html/Reporter.html#method-Reporter-start_test'><code>testthat::Reporter$start_test()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="Reporter" data-id="update"><a href='../../testthat/html/Reporter.html#method-Reporter-update'><code>testthat::Reporter$update()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="ProgressReporter" data-id="cr"><a href='../../testthat/html/ProgressReporter.html#method-ProgressReporter-cr'><code>testthat::ProgressReporter$cr()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="ProgressReporter" data-id="report_issues"><a href='../../testthat/html/ProgressReporter.html#method-ProgressReporter-report_issues'><code>testthat::ProgressReporter$report_issues()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="ProgressReporter" data-id="should_update"><a href='../../testthat/html/ProgressReporter.html#method-ProgressReporter-should_update'><code>testthat::ProgressReporter$should_update()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testthat" data-topic="ProgressReporter" data-id="status_data"><a href='../../testthat/html/ProgressReporter.html#method-ProgressReporter-status_data'><code>testthat::ProgressReporter$status_data()</code></a></span></li>
<li><span class="pkg-link" data-pkg="evalthat" data-topic="EvalProgressReporter" data-id="add_result"><a href='../../evalthat/html/EvalProgressReporter.html#method-EvalProgressReporter-add_result'><code>evalthat::EvalProgressReporter$add_result()</code></a></span></li>
<li><span class="pkg-link" data-pkg="evalthat" data-topic="EvalProgressReporter" data-id="cache_for_grading"><a href='../../evalthat/html/EvalProgressReporter.html#method-EvalProgressReporter-cache_for_grading'><code>evalthat::EvalProgressReporter$cache_for_grading()</code></a></span></li>
<li><span class="pkg-link" data-pkg="evalthat" data-topic="EvalProgressReporter" data-id="end_context"><a href='../../evalthat/html/EvalProgressReporter.html#method-EvalProgressReporter-end_context'><code>evalthat::EvalProgressReporter$end_context()</code></a></span></li>
<li><span class="pkg-link" data-pkg="evalthat" data-topic="EvalProgressReporter" data-id="end_file"><a href='../../evalthat/html/EvalProgressReporter.html#method-EvalProgressReporter-end_file'><code>evalthat::EvalProgressReporter$end_file()</code></a></span></li>
<li><span class="pkg-link" data-pkg="evalthat" data-topic="EvalProgressReporter" data-id="is_full"><a href='../../evalthat/html/EvalProgressReporter.html#method-EvalProgressReporter-is_full'><code>evalthat::EvalProgressReporter$is_full()</code></a></span></li>
<li><span class="pkg-link" data-pkg="evalthat" data-topic="EvalProgressReporter" data-id="reset_counts"><a href='../../evalthat/html/EvalProgressReporter.html#method-EvalProgressReporter-reset_counts'><code>evalthat::EvalProgressReporter$reset_counts()</code></a></span></li>
<li><span class="pkg-link" data-pkg="evalthat" data-topic="EvalProgressReporter" data-id="result_summary"><a href='../../evalthat/html/EvalProgressReporter.html#method-EvalProgressReporter-result_summary'><code>evalthat::EvalProgressReporter$result_summary()</code></a></span></li>
<li><span class="pkg-link" data-pkg="evalthat" data-topic="EvalProgressReporter" data-id="save_results"><a href='../../evalthat/html/EvalProgressReporter.html#method-EvalProgressReporter-save_results'><code>evalthat::EvalProgressReporter$save_results()</code></a></span></li>
<li><span class="pkg-link" data-pkg="evalthat" data-topic="EvalProgressReporter" data-id="show_header"><a href='../../evalthat/html/EvalProgressReporter.html#method-EvalProgressReporter-show_header'><code>evalthat::EvalProgressReporter$show_header()</code></a></span></li>
<li><span class="pkg-link" data-pkg="evalthat" data-topic="EvalProgressReporter" data-id="start_context"><a href='../../evalthat/html/EvalProgressReporter.html#method-EvalProgressReporter-start_context'><code>evalthat::EvalProgressReporter$start_context()</code></a></span></li>
<li><span class="pkg-link" data-pkg="evalthat" data-topic="EvalProgressReporter" data-id="update_counts"><a href='../../evalthat/html/EvalProgressReporter.html#method-EvalProgressReporter-update_counts'><code>evalthat::EvalProgressReporter$update_counts()</code></a></span></li>
<li><span class="pkg-link" data-pkg="evalthat" data-topic="EvalProgressReporter" data-id="update_io"><a href='../../evalthat/html/EvalProgressReporter.html#method-EvalProgressReporter-update_io'><code>evalthat::EvalProgressReporter$update_io()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalCompactProgressReporter-new"></a>}}
\if{latex}{\out{\hypertarget{method-EvalCompactProgressReporter-new}{}}}
\subsection{Method \code{new()}}{
Sets minimum time to infinity.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalCompactProgressReporter$new(min_time = Inf, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{min_time}}{A numeric. Defaults to \code{Inf}.}

\item{\code{...}}{Passed on to \code{super$initialize()}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalCompactProgressReporter-start_file"></a>}}
\if{latex}{\out{\hypertarget{method-EvalCompactProgressReporter-start_file}{}}}
\subsection{Method \code{start_file()}}{
Setup for a single file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalCompactProgressReporter$start_file(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{File name.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalCompactProgressReporter-start_reporter"></a>}}
\if{latex}{\out{\hypertarget{method-EvalCompactProgressReporter-start_reporter}{}}}
\subsection{Method \code{start_reporter()}}{
Setup.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalCompactProgressReporter$start_reporter()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalCompactProgressReporter-end_reporter"></a>}}
\if{latex}{\out{\hypertarget{method-EvalCompactProgressReporter-end_reporter}{}}}
\subsection{Method \code{end_reporter()}}{
Teardown.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalCompactProgressReporter$end_reporter()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalCompactProgressReporter-show_status"></a>}}
\if{latex}{\out{\hypertarget{method-EvalCompactProgressReporter-show_status}{}}}
\subsection{Method \code{show_status()}}{
Show current status.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalCompactProgressReporter$show_status(complete = NULL, time = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{complete}}{Ignored.}

\item{\code{time}}{Ignored--included for compatibility with \link{EvalProgressReporter}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EvalCompactProgressReporter-clone"></a>}}
\if{latex}{\out{\hypertarget{method-EvalCompactProgressReporter-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EvalCompactProgressReporter$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
